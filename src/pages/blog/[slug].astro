---
import { Image } from 'astro:assets';

import { getAllPostsWithReadingTime } from '@/modules/post/common';
import { getRandomPosts } from '@/modules/post/random';
import { getHeadingsForTableOfContents } from '@/modules/post/table-of-contents';
import { default as PostLayout } from '@/layouts/Post.astro';
import PostListMore from '@/components/PostListMore.astro';
import PostMeta from '@/components/PostMeta.astro';
import Share from '@/components/Share.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import TagList from '@/components/TagList.astro';
import { draftText } from '@/constants/data';
import { IMAGE_SIZES } from '@/constants/image';
import { ROUTES } from '@/constants/routes';
import { getOpenGraphImagePath } from '@/libs/api/open-graph/image-path';

import type { Metadata } from '@/types/common';
import type { Post } from '@/types/post';

export async function getStaticPaths() {
  const posts: Post[] = await getAllPostsWithReadingTime();

  const paths = posts.map((post) => {
    const { slug } = post;
    const randomPosts = getRandomPosts({ posts, excludeSlug: slug });

    return {
      params: { slug },
      props: { ...post, randomPosts },
    };
  });

  return paths;
}

const { data, render, readingTime, randomPosts } = Astro.props;
const {
  draft,
  title,
  publishDate,
  updatedDate,
  description,
  toc,
  heroImage,
  heroAlt,
  noHero,
  category,
  tags = [],
} = data;

const { slug } = Astro.params;
const { pathname } = Astro.url;

const { Content, headings: postHeadings } = await render();
const headings = getHeadingsForTableOfContents(postHeadings);

const postMetaProps = {
  category,
  publishDate,
  readingTime,
  updatedDate,
};

// handle all metadata here
const image = getOpenGraphImagePath(pathname);

const metadata: Metadata = { title, description, image };
---

<PostLayout {metadata}>
  <Fragment slot="hero-image">
    {/* hero image 1280x720 max, 16:9 */}
    {
      !noHero && (
        <Image
          {...IMAGE_SIZES.RESPONSIVE.POST_HERO}
          src={heroImage}
          alt={heroAlt}
          fetchpriority="high"
          loading="eager"
          itemprop="image"
          class="block max-w-full h-auto aspect-[16/8] object-cover"
        />
      )
    }
  </Fragment>

  <Fragment slot="hero-text">
    {/* title */}
    <h1>
      {title}
      {draft && <sup class="text-red-500 ml-1">{draftText}</sup>}
    </h1>

    {/* description */}
    {description && <h2 class="font-normal text-xl lg:text-2xl tracking-tight">{description}</h2>}

    {/* meta */}
    <PostMeta {...postMetaProps} class="not-prose" />
  </Fragment>

  {/* section content */}
  <Fragment slot="content">
    {/* table of contents */}
    {toc && <TableOfContents headings={headings} />}

    <Content />

    <TagList tags={tags} size="lg" class="mb-4 md:mb-6" />

    <Share {title} {description} url={`${ROUTES.BLOG}${slug}`} size="md" />
  </Fragment>

  <Fragment slot="more-posts">
    <PostListMore morePosts={randomPosts} />
  </Fragment>
</PostLayout>
