---
import { Icon } from 'astro-icon/components';

import Link from '@/components/Link.astro';
import { cn } from '@/utils/styles';

import type { PaginationProps } from '@/types/common';

export interface Props extends PaginationProps, astroHTML.JSX.HTMLAttributes {
  showIfOnePage?: boolean;
}

// page - numbers
const {
  showIfOnePage = false,
  url,
  currentPage,
  lastPage,
  start,
  end,
  total,
  class: className,
} = Astro.props;
// all links in Astro are relative /blog/2
const { prev: prevUrl, current: currentUrl, next: nextUrl } = url;

const getFirstUrl = (url: string) => url.replace(/\/\d+$/, '/');

const firstUrl = getFirstUrl(currentUrl);
const getPageUrl = (pageNumber: number) =>
  pageNumber === 1 ? firstUrl : `${firstUrl}/${pageNumber}`;

const lastUrl = getPageUrl(lastPage);
const hasMoreThanOnePage = () => lastPage > 1;

const pageNumbers = Array.from({ length: lastPage }, (_, i) => i + 1);

const threePageNumbers = (currentPage: number, lastPage: number): number[] => {
  const hasPrevious1Index = lastPage > 3 ? 2 : 1;
  const hasPrevious2Index = lastPage > 3 ? 3 : 2;
  const hasNext1Index = lastPage > 3 ? 1 : 0;
  const hasNext2Index = lastPage > 3 ? 2 : 1;

  const hasPrevious2 = currentPage > hasPrevious2Index;
  const hasPrevious1 = currentPage > hasPrevious1Index;
  const hasNext1 = currentPage < lastPage - hasNext1Index;
  const hasNext2 = currentPage < lastPage - hasNext2Index;

  const previous2 = hasPrevious2 ? currentPage - 2 : undefined;
  const previous1 = hasPrevious1 ? currentPage - 1 : undefined;
  const next1 = hasNext1 ? currentPage + 1 : undefined;
  const next2 = hasNext2 ? currentPage + 2 : undefined;

  // current - array
  // 1       - 1 2 3
  // 2       - 1 2 3
  // 3       - 2 3 4
  // 4       - 3 4 5
  // 5       - 3 4 5

  const pageNumbers = [previous2, previous1, currentPage, next1, next2];

  const pageNumbersFiltered = pageNumbers.filter(Boolean) as number[];

  console.log('currentPage', currentPage);
  console.log('lastPage', lastPage);
  console.log('pageNumbers', pageNumbers);
  console.log('pageNumbersFiltered', pageNumbersFiltered);

  return pageNumbersFiltered;
};
---

{
  hasMoreThanOnePage() || showIfOnePage ? (
    <div class={cn('flex items-center justify-between gap-4', className)}>
      <p class="text-base">
        Showing
        <span class="font-bold">{start + 1}</span>
        to
        <span class="font-bold">{end + 1}</span>
        of
        <span class="font-bold">{total}</span>
        results
      </p>

      <nav aria-label="pages" class="flex items-center justify-end gap-4 text-xl">
        <Link href={firstUrl} disabled={!prevUrl}>
          <Icon name="mdi:chevron-double-left" />
        </Link>

        <Link href={prevUrl} disabled={!prevUrl}>
          <Icon name="mdi:chevron-left" />
        </Link>

        {threePageNumbers(currentPage, lastPage).map((pageNumber) => {
          const isCurrentPage = pageNumber === currentPage;

          // trimm long pagination with (...)

          return (
            <Link
              href={getPageUrl(pageNumber)}
              disabled={isCurrentPage}
              class={cn({ 'underline font-semibold': isCurrentPage })}
            >
              {pageNumber}
            </Link>
          );
        })}

        <Link href={nextUrl} disabled={!nextUrl}>
          <Icon name="mdi:chevron-right" />
        </Link>

        <Link href={lastUrl} disabled={!nextUrl}>
          <Icon name="mdi:chevron-double-right" />
        </Link>
      </nav>
    </div>
  ) : null
}
