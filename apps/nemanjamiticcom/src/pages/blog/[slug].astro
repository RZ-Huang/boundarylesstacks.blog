---
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

import Aside from '../../components/Aside.astro';
import AuthorMeta from '../../components/AuthorMeta.astro';
import Link from '../../components/Link.astro';
import PageInfo from '../../components/PageInfo.astro';
import Prose from '../../components/Prose.astro';
import { Share, ShareLink } from '../../components/Share';
import TocList from '../../components/TocList.astro';
import Base from '../../layouts/Base.astro';
import { getPostSlug, getRandomEntries } from '../../modules/blog-post';
import { sortPostsByDateDesc } from '../../utils/post';

import type { MarkdownHeading } from 'astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return import.meta.env.DEV || !data.draft;
  });

  const paths = sortPostsByDateDesc(posts).map((post) => {
    const slug = getPostSlug(post);

    return {
      params: { slug },
      props: { ...post, randomEntries: getRandomEntries(posts, 4, slug) },
    };
  });

  return paths;
}

const {
  id,
  data: {
    draft,
    title,
    pubDate,
    updatedDate,
    description,
    toc,
    heroImage,
    heroAlt,
    noHero,
    category,
    tags,
  },
  render,
  randomEntries,
} = Astro.props;
const { slug } = Astro.params;

const {
  Content,
  headings: postHeadings,
  remarkPluginFrontmatter: { readingTime },
} = await render();

/*
transform array:
{
  depth: 2,
  slug: 'commodo-commodo',
  text: 'Commodo commodo',
},

to 2-dim array:
{
  slug: 'commodo-commodo',
  text: 'Commodo commodo',
  headings: {
      slug: 'commodo-commodo',
      text: 'Commodo commodo',
      headings: [],
  }
},
*/

interface Heading extends Pick<MarkdownHeading, 'slug' | 'text'> {
  headings: Array<Heading>;
}

// get subtitles for TOC
const headings: Array<Heading> = [];

for (let index = 0; index < postHeadings.length; index++) {
  const { slug, text, depth } = postHeadings[index];

  if (depth !== 2) continue;

  // get subsequent depth 3 subheadings
  // handle 2
  const subHeadings: Array<Heading> = [];

  // handle 3+
  while (index + 1 < postHeadings.length && postHeadings[index + 1].depth > 2) {
    index++;

    // take only depth 3
    if (postHeadings[index].depth !== 3) continue;

    subHeadings.push({
      slug: postHeadings[index].slug,
      text: postHeadings[index].text,
      headings: [],
    });
  }

  headings.push({ slug, text, headings: subHeadings });
}

const { render: renderMarkdown } = await createMarkdownProcessor({});

const more = [];
for (const entry of randomEntries) {
  more.push({ ...entry, description: await renderMarkdown(entry.data.description ?? '') });
}
---

<Base title={title} description={description} image={heroImage?.src}>
  <article class="mb-12" itemprop="blogPost" itemscope itemtype="http://schema.org/Article">
    <meta itemprop="mainEntityOfPage" content={`${slug}`} />
    <Prose>
      {category && <p>{category}</p>}
      <h1 itemprop="name headline" transition:name={`title-${slug!.replace(/.*\//, '')}`}>
        {title}
        {draft ? <sup class="text-red-400">(draft)</sup> : null}
      </h1>
      {
        tags && tags.length > 0 && (
          <div class="w-full md:w-auto flex flex-wrap gap-3">
            {tags.map((tag) => (
              <Link href="#">#{tag}</Link>
            ))}
          </div>
        )
      }
      <PageInfo
        file={`src/content/blog/${id}`}
        pubDate={pubDate}
        updatedDate={updatedDate}
        readingTime={readingTime}
      />

      {
        !noHero && heroImage?.src ? (
          <div class="lg:bustout">
            <Image
              src={heroImage}
              alt={heroAlt ?? ''}
              fetchpriority="high"
              loading="eager"
              width={1280}
              itemprop="image"
              class="!mt-0 w-full max-w-none"
              transition:name={`hero-${slug!.replace(/.*\//, '')}`}
            />
          </div>
        ) : null
      }

      <AuthorMeta />

      <div itemprop="articleBody" transition:name={`content-${slug!.replace(/.*\//, '')}`}>
        {
          toc && (
            <aside class="prose-base mx-4 mb-4 rounded-xl border border-slate-200 bg-slate-100 px-4 py-1 text-slate-900 transition-colors duration-500 dark:border-slate-800 dark:bg-slate-900 sm:float-right sm:ml-8 sm:mr-0 sm:max-w-[50%] md:-mr-8 lg:-mr-32">
              <h2 class="!mt-4">Table of contents</h2>
              <TocList headings={headings} />
            </aside>
          )
        }

        <Content />
      </div>

      <hr />

      <Aside title="Share your thoughts">
        <div class="flex flex-col items-start gap-x-4 gap-y-0 sm:flex-row-reverse">
          <div class="mt-4 justify-self-center">
            <div class="w-28"><Share client:load title={title} url={`/blog/${slug}/`} /></div>
          </div>
          <p class="!mb-1 inline-flex shrink flex-wrap gap-x-1">
            Since youâ€™ve made it this far, hopefully you enjoyed reading! Please
            <ShareLink client:load title={title} url={`/blog/${slug}/`}>share</ShareLink>
            {' '}the post or <Link
              href="https://mstdn.io/@paularmstrong"
              target="_blank"
              rel="noopener noreferrer"
            >
              ping me on Mastodon
            </Link>
          </p>
        </div>
      </Aside>
    </Prose>
  </article>

  <aside class="select-none">
    <Prose>
      <h2 id="post-nav">More posts</h2>
    </Prose>

    <ul class="flex flex-col gap-8">
      {
        more.map((entry) => (
          <li>
            <Link class="text-xl font-bold" href={`/blog/${getPostSlug(entry)}/`} itemprop="url">
              {entry.data.title}
            </Link>
            <div class="prose prose-slate line-clamp-2 dark:prose-invert">
              <Fragment set:html={entry.description.code ?? ''} />
            </div>
          </li>
        ))
      }
    </ul>
  </aside>
</Base>
