---
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

import AuthorMeta from '../../components/AuthorMeta.astro';
import Link from '../../components/Link.astro';
import MorePosts from '../../components/MorePosts.astro';
import PageInfo from '../../components/PageInfo.astro';
import Prose from '../../components/Prose.astro';
import SharePost from '../../components/SharePost.astro';
import TagList from '../../components/TagList.astro';
import TocWidget from '../../components/TocWidget.astro';
import Base from '../../layouts/Base.astro';
import { getPostSlug, getRandomEntries } from '../../modules/blog-post';
import { sortPostsByDateDesc } from '../../utils/post';

import type { MarkdownProcessorRenderResult } from '@astrojs/markdown-remark';
import type { MarkdownHeading } from 'astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return import.meta.env.DEV || !data.draft;
  });

  const paths = sortPostsByDateDesc(posts).map((post) => {
    const slug = getPostSlug(post);
    const randomEntries = getRandomEntries(posts, 4, slug);

    return {
      params: { slug },
      props: { ...post, randomEntries },
    };
  });

  return paths;
}

const {
  id,
  data: {
    draft,
    title,
    pubDate,
    updatedDate,
    description,
    toc,
    heroImage,
    heroAlt,
    noHero,
    category,
    tags = [],
  },
  render,
  randomEntries,
} = Astro.props;
const { slug } = Astro.params;

const {
  Content,
  headings: postHeadings,
  remarkPluginFrontmatter: { readingTime },
} = await render();

interface Heading extends Pick<MarkdownHeading, 'slug' | 'text'> {
  headings: Heading[];
}

// get subtitles for TOC
const headings: Heading[] = [];

for (let index = 0; index < postHeadings.length; index++) {
  const { slug, text, depth } = postHeadings[index];

  if (depth !== 2) continue;

  // get subsequent depth 3 subheadings
  // handle 2
  const subHeadings: Heading[] = [];

  // handle 3+
  while (index + 1 < postHeadings.length && postHeadings[index + 1].depth > 2) {
    index++;

    // take only depth 3
    if (postHeadings[index].depth !== 3) continue;

    subHeadings.push({
      slug: postHeadings[index].slug,
      text: postHeadings[index].text,
      headings: [],
    });
  }

  headings.push({ slug, text, headings: subHeadings });
}

// more posts with rendered md description
export type CollectionEntryWithRenderedDescription = CollectionEntry<'blog'> & {
  description: MarkdownProcessorRenderResult;
};

const { render: renderMarkdown } = await createMarkdownProcessor();

const morePosts: CollectionEntryWithRenderedDescription[] = [];
for (const entry of randomEntries) {
  const description = await renderMarkdown(entry.data.description ?? '');
  morePosts.push({ ...entry, description });
}
---

{/* clean up all of this */}
<Base title={title} description={description} image={heroImage?.src}>
  <article class="mb-12" itemprop="blogPost" itemscope itemtype="http://schema.org/Article">
    <meta itemprop="mainEntityOfPage" content={`${slug}`} />
    {
      category && (
        <div class="leading-4 uppercase font-semibold">
          <Link href="#" variant="category">
            {category}
          </Link>
        </div>
      )
    }
    <Prose>
      <h1 itemprop="name headline" transition:name={`title-${slug!.replace(/.*\//, '')}`}>
        {title}
        {draft ? <sup class="text-red-400">(draft)</sup> : null}
      </h1>
      <TagList tags={tags} marginY />
      <PageInfo
        file={`src/content/blog/${id}`}
        pubDate={pubDate}
        updatedDate={updatedDate}
        readingTime={readingTime}
      />

      {
        !noHero && heroImage?.src && (
          <div class="lg:bustout">
            <Image
              src={heroImage}
              alt={heroAlt ?? ''}
              fetchpriority="high"
              loading="eager"
              width={1280}
              itemprop="image"
              class="!mt-0 w-full max-w-none"
              transition:name={`hero-${slug!.replace(/.*\//, '')}`}
            />
          </div>
        )
      }

      <AuthorMeta />

      <div itemprop="articleBody" transition:name={`content-${slug!.replace(/.*\//, '')}`}>
        {/* table of contents */}
        {toc && <TocWidget headings={headings} />}

        <Content />
      </div>
      <hr />

      <SharePost title={title} slug={slug} />
    </Prose>
  </article>

  <MorePosts morePosts={morePosts} />
</Base>
