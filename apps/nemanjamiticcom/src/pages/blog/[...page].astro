---
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { getCollection } from 'astro:content';

import PostCard from '~/components/PostCard.astro';
import AuthorMeta from '../../components/AuthorMeta.astro';
import Pagination from '../../components/Pagination.astro';
import Prose from '../../components/Prose.astro';
import Config from '../../config';
import Base from '../../layouts/Base.astro';

import type { MarkdownProcessorRenderResult } from '@astrojs/markdown-remark';
import type { GetStaticPathsOptions, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';

// [page].astro and getStaticPaths because of pagination
export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const posts = await getCollection('blog', ({ data }) => !(import.meta.env.PROD && data.draft));
  const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

  const pagination = paginate(sortedPosts, { pageSize: Config.PAGE_SIZE }); // must take entire config here, interesting
  pagination.push({ params: { page: '1' }, props: pagination[0].props });
  return pagination;
}

type Props = {
  page: Page<CollectionEntry<'blog'>>;
};

const { render: renderMarkdown } = await createMarkdownProcessor({});

// page from pagination
const { page } = Astro.props;

const descriptions: Record<string, MarkdownProcessorRenderResult> = {};
for (const post of page.data) {
  if (typeof post === 'string') continue;

  descriptions[post.data.title] = await renderMarkdown(post.data.description || '');
}
---

<Base title="Blog">
  <Prose>
    <h1>Blog</h1>
    <p>
      Rambling, ranting, and ravingâ€¦ But mostly just whatever seems important in the moment about
      JavaScript, frontend development, and life surrounding me.
    </p>
  </Prose>
  <section>
    <AuthorMeta id="author" />
    <ul class="flex flex-col items-center gap-16">
      {page.data.map((post) => <PostCard post={post} />)}
    </ul>
  </section>

  <Pagination
    nextUrl={page.url.next}
    prevUrl={page.url.prev}
    current={page.currentPage}
    total={page.lastPage}
  />
</Base>
