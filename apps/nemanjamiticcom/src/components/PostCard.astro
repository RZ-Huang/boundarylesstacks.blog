---
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { Image } from 'astro:assets';

import { getPostSlug } from '../modules/blog-post';
import { dateFormatter } from '../utils/datetime';
import { getRandomLengthSubstring } from '../utils/strings';
import Link from './Link.astro';

import type { MarkdownProcessorRenderResult } from '@astrojs/markdown-remark';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const {
  draft,
  pubDate,
  title,
  heroImage,
  heroAlt = '',
  category,
  tags = [],
  description = '',
} = post.data;

// prepare all data for render

const { render: renderMarkdown } = await createMarkdownProcessor({});
// ! this can break tags in markup
const clippedDescription = getRandomLengthSubstring(description, 100, 50) + '...';
const renderedDescription: MarkdownProcessorRenderResult = await renderMarkdown(clippedDescription);

const slug = getPostSlug(post);
const date = dateFormatter(new Date(pubDate));

// image
// date, category
// title
// desription
// tags
---

<article class="flex flex-col md:flex-row gap-5 md:gap-10 md:max-w-none">
  {/* left column */}

  {/* image */}
  {
    heroImage && (
      <div class="md:basis-1/2">
        <Image
          src={heroImage}
          alt={heroAlt}
          width={800}
          height={600}
          itemprop="image"
          class="w-full md:max-h-56 object-cover object-center rounded-md"
          transition:name={`hero-${heroImage.src}`}
        />
      </div>
    )
  }

  {/* right column */}
  <div class="flex flex-col md:basis-1/2 gap-2">
    {/* date, category */}
    <div class="flex items-center gap-2 leading-4">
      <time
        class="text-right text-slate-600 dark:text-slate-300"
        datetime={pubDate.toISOString().split('T')[0]}
        itemprop="datePublished"
      >
        {date}
      </time>
      {
        category && (
          <Link href="#" variant="category">
            {category}
          </Link>
        )
      }
    </div>

    {/* title */}
    <h2
      class="text-3xl font-bold flex gap-2"
      itemprop="name headline"
      transition:name={`title-${slug}`}
    >
      <Link href={slug} itemprop="url" variant="heading">
        {title}
        {draft && <sup class="text-sm text-red-400">(draft)</sup>}
      </Link>
    </h2>

    {/* description */}
    <div transition:name={`content-${slug}`}>
      <Fragment set:html={renderedDescription.code} />
    </div>

    {/* tags */}
    <div class="flex flex-wrap gap-2">
      {tags.map((tag) => <Link href="#">#{tag}</Link>)}
    </div>
  </div>
</article>
