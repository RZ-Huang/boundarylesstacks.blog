---
import { Image } from 'astro:assets';

import { getPostSlug } from '@/modules/post';
import Link from '@/components/Link.astro';
import PostMeta from '@/components/PostMeta.astro';
import TagList from '@/components/TagList.astro';
import Heading from '@/components/ui/Heading.astro';
import Text from '@/components/ui/Text.astro';
import { ROUTES } from '@/constants/routes';
import { renderMarkdown } from '@/utils/markdown';
import { getRandomLengthSubstring } from '@/utils/strings';

import type { PostCollection } from '@/types/post';

export interface Props {
  post: PostCollection;
}

const { post } = Astro.props;
const {
  draft,
  publishDate,
  title,
  heroImage,
  heroAlt = '',
  category,
  tags = [],
  description = '',
} = post.data;

// prepare all data for render

// ! this can break tags in markup
const clippedDescription = getRandomLengthSubstring(description, 100, 50) + '...';
const renderedDescription = await renderMarkdown(clippedDescription);

const slug = getPostSlug(post);

const postMetaProps = {
  category,
  publishDate,
};

// image
// date, category
// title
// desription
// tags
---

<article class="flex flex-col md:flex-row gap-5 md:gap-10 md:max-w-none">
  {/* left column */}

  {/* image */}
  {
    heroImage && (
      <div class="md:basis-1/3">
        <Image
          src={heroImage}
          alt={heroAlt}
          width={800}
          height={600}
          itemprop="image"
          class="w-full md:max-h-56 object-cover object-center rounded-md"
          transition:name={`hero-${heroImage.src}`}
        />
      </div>
    )
  }

  {/* right column */}
  <div class="flex flex-col justify-between md:basis-2/3">
    <div class="flex flex-col gap-2">
      <PostMeta {...postMetaProps} />

      {/* title */}
      <Heading as="h2" transitionName={`title-${slug}`}>
        {/* fix relative path here from tags and categories */}
        <Link href={`${ROUTES.BLOG}${slug}`} variant="transparent">
          {title}
          {draft && <sup class="text-sm text-red-400">(draft)</sup>}
        </Link>
      </Heading>

      {/* description, can have markdown */}
      <Text transitionName={`content-${slug}`} as="div" color="captions">
        <Fragment set:html={renderedDescription.code} />
      </Text>
    </div>

    {/* tags */}
    <TagList tags={tags} />
  </div>
</article>
